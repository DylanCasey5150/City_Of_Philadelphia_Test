{"version":3,"sources":["components/PostHeader/PostHeader.js","components/PostRow/PostRow.js","components/PostFilter/PostFilter.js","components/Post/Post.js","components/utils/organizePosts.js","components/Data-Container/PostData.js","App.js","serviceWorker.js","index.js"],"names":["PostHeader","react_default","a","createElement","className","PureComponent","PostRow","formatDate","moment","this","props","date","format","href","link","target","rel","title","rendered","defaultProps","PostFilter","handleInput","event","_this","onInput","value","placeholder","oninput","Posts","updateFilter","posts","map","post","PostRow_PostRow_PostRow","key","PostFilter_PostFilter_PostFilter","PostHeader_PostHeader_PostHeader","organizePosts","filter","toLowerCase","indexOf","sort","b","Date","slice","proxyurl","url","App","WrappedComponent","PostsWithData","Post","_Component","_temp","_getPrototypeOf2","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","organizedPosts","setState","inherits","createClass","_this2","fetch","then","d","json","assign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a221d26.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nimport \"../PostHeader/PostHeader.css\";\n\nexport default class PostHeader extends PureComponent {\n  render() {\n    return (\n      <thead className=\"PostHeader\">\n        <tr className=\"PostHeader__labels\">\n          <th className=\"PostHeader__label__title\">TITLE</th>\n          <th className=\"PostHeader__label__date\">PUBLISH DATE</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./PostRow.css\";\nimport moment from \"moment\";\n\nexport default class PostRow extends PureComponent {\n  render() {\n    const formatDate = moment(this.props.date).format(\"MMM Do YYYY\");\n\n    return (\n      <tr className=\"PostRow\">\n        <td className=\"PostRow__value\">\n          <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {this.props.title.rendered}\n          </a>\n        </td>\n        <td className=\"PostRow__value\">{formatDate}</td>\n      </tr>\n    );\n  }\n}\n\nPostRow.propTypes = {\n  title: PropTypes.shape({ rendered: PropTypes.string }),\n  date: PropTypes.string,\n  link: PropTypes.string\n};\n\nPostRow.defaultProps = {\n  title: { rendered: \"\" },\n  date: \"\",\n  link: \"\"\n};\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./PostFilter.css\";\n\nexport default class PostFilter extends PureComponent {\n  handleInput = event => {\n    this.props.onInput(event.target.value);\n  };\n\n  render() {\n    return (\n      <input\n        className=\"PostFilter\"\n        onInput={this.handleInput}\n        placeholder=\"Search by title\"\n      />\n    );\n  }\n}\n\nPostFilter.propTypes = {\n  onInput: PropTypes.func\n};\n\nPostFilter.defaultProps = {\n  oninput: () => {}\n};\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Post.css\";\nimport PostHeader from \"../PostHeader/PostHeader.js\";\nimport PostRow from \"../PostRow/PostRow.js\";\nimport PostFilter from \"../PostFilter/PostFilter.js\";\n\nclass Posts extends PureComponent {\n  render() {\n    const { updateFilter } = this.props;\n    const posts = this.props.posts.map(post => (\n      <PostRow\n        key={post.link}\n        title={post.title}\n        date={post.date}\n        link={post.link}\n      />\n    ));\n\n    return (\n      <div className=\"Posts\">\n        <PostFilter onInput={updateFilter} />\n        <table>\n          <PostHeader />\n          <tbody>{posts}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n\nPosts.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.shape({\n        rendered: PropTypes.string\n      }),\n      date: PropTypes.string,\n      link: PropTypes.string\n    })\n  ),\n  updateFilter: PropTypes.func.isRequired\n};\n\nPosts.defaultProps = {\n  posts: []\n};\n","export default function organizePosts(filter, posts) {\n  const filteredPosts = posts.filter(posts => {\n    return (\n      posts.title.rendered.toLowerCase().indexOf(filter.toLowerCase()) !== -1\n    );\n  });\n  const sortedPosts = filteredPosts.sort((a, b) => {\n    return new Date(b.date) - new Date(a.date);\n  });\n\n  const limitPosts = sortedPosts.slice(0, 20);\n\n  return limitPosts;\n}\n","import React, { Component } from \"react\";\nimport organizePosts from \"../utils/organizePosts.js\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://www.phila.gov/wp-json/wp/v2/posts/\";\n\nexport default function PostData(WrappedComponent) {\n  return class extends Component {\n    state = {\n      filter: \"\",\n      posts: [],\n      organizedPosts: []\n    };\n\n    componentDidMount() {\n      fetch(proxyurl + url)\n        .then(d => d.json())\n        .then(posts => {\n          const { filter } = this.state;\n          this.setState({\n            posts,\n            organizedPosts: organizePosts(filter, posts)\n          });\n        });\n    }\n\n    updateFilter = filter => {\n      const { posts } = this.state;\n      this.setState({\n        organizedPosts: organizePosts(filter, posts)\n      });\n    };\n\n    render() {\n      const { organizedPosts } = this.state;\n\n      return (\n        <WrappedComponent\n          {...this.props}\n          posts={organizedPosts}\n          updateFilter={this.updateFilter}\n        />\n      );\n    }\n  };\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Post from \"./components/Post/Post.js\";\nimport PostData from \"./components/Data-Container/PostData.js\";\n\nfunction App() {\n  const PostsWithData = PostData(Post);\n  return (\n    <div className=\"App\">\n      <PostsWithData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}